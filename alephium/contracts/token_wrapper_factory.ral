import "serde.ral"

TxContract TokenWrapperFactory() extends Serde() {
    pub payable fn createWrapper(
        tokenBridgeId: ByteVec,
        localChainId: U256,
        remoteChainId: U256,
        tokenContractId: ByteVec,
        isLocalToken: Bool,
        tokenDecimals: U256,
        tokenSymbol: ByteVec,
        tokenName: ByteVec,
        payer: Address,
        createContractAlphAmount: U256
    ) -> () {
        let contractCode = #{{ tokenWrapperBinCode }}
        let encodedState = byteVec!(9i) ++ // state size
                           encodeByteVec(tokenBridgeId) ++
                           encodeByteVec(callerContractId!()) ++
                           encodeU256(localChainId) ++
                           encodeU256(remoteChainId) ++
                           encodeByteVec(tokenContractId) ++
                           encodeBool(isLocalToken) ++
                           encodeU256(tokenDecimals) ++
                           encodeByteVec(tokenSymbol) ++
                           encodeByteVec(tokenName)

        approveAlph!(payer, createContractAlphAmount)
        assert!(remoteChainId != localChainId)
        if (isLocalToken) {
            createContract!(contractCode, encodedState)
        } else {
            let maxAmount = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
            createContractWithToken!(contractCode, encodedState, maxAmount)
        }
    }
}
