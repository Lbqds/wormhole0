import "serde.ral"

TxContract TokenWrapperFactory() extends Serde() {
    pub payable fn createTokenWrapper(
        tokenBridgeId: ByteVec,
        tokenBridgeForChainId: ByteVec,
        localChainId: U256,
        tokenChainId: U256,
        tokenContractId: ByteVec,
        tokenDecimals: U256,
        tokenSymbol: ByteVec,
        tokenName: ByteVec,
        payer: Address,
        createContractAlphAmount: U256
    ) -> () {
        let contractCode = #{{ tokenWrapperBinCode }}
        let encodedState = byteVec!(8i) ++ // state size
                           encodeByteVec(tokenBridgeId) ++
                           encodeByteVec(tokenBridgeForChainId) ++
                           encodeU256(localChainId) ++
                           encodeU256(tokenChainId) ++
                           encodeByteVec(tokenContractId) ++
                           encodeU256(tokenDecimals) ++
                           encodeByteVec(tokenSymbol) ++
                           encodeByteVec(tokenName)

        approveAlph!(payer, createContractAlphAmount)
        assert!(tokenChainId != localChainId)
        let maxAmount = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
        createContractWithToken!(contractCode, encodedState, maxAmount)
    }
}
