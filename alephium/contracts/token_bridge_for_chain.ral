import "token_bridge.ral"
import "token.ral"
import "token_wrapper_factory.ral"
import "math.ral"

TxContract TokenBridgeForChain(
    localChainId: U256,
    localTokenBridgeId: ByteVec, // local chain token bridge contract id
    remoteChainId: U256,
    remoteTokenBridgeId: ByteVec, // remote chain token bridge contract id
    mut initialized: Bool,
    mut sequenceContract: ByteVec // the sequence contract address
) {
    pub fn init(address: ByteVec) -> () {
        assert!(!initialized)
        initialized = true
        assert!(contractCodeHash!(address) == #{{ sequenceCodeHash }})
        let sequence = Sequence(address)
        assert!(sequence.getOwner() == selfContractId!())
        assert!(sequence.getExecuted() == 0)
        let next1 = sequence.getNext1()
        loop(0, 20, 1, assert!(next1[?] == false))
        let next2 = sequence.getNext2()
        loop(0, 20, 1, assert!(next2[?] == false))
        sequenceContract = address
    }

    pub fn getLocalTokenBridgeId() -> (ByteVec) {
        return localTokenBridgeId
    }

    pub fn getLocalChainId() -> (U256) {
        return localChainId
    }

    // return payload
    fn verifyVAA(vaa: ByteVec) -> (ByteVec) {
        let tokenBridge = TokenBridge(localTokenBridgeId)
        let (emitterChainId, emitterAddress, msgSequence, payload) = tokenBridge.parseAndVerify(vaa)
        assert!(emitterChainId == remoteChainId)
        assert!(emitterAddress == remoteTokenBridgeId)
        let sequence = Sequence(sequenceContract)
        sequence.checkSequence(msgSequence)
        return payload
    }

    // return (tokenChainId, tokenContractId, tokenDecimals, tokenSymbol, tokenName)
    fn parseAttestToken(vaa: ByteVec) -> (U256, ByteVec, U256, ByteVec, ByteVec) {
        let payload = verifyVAA(vaa)
        let mut index = 0
        assert!(byteVecSlice!(payload, index, index + 1) == #02) // payload id
        index = index + 1
        let tokenContractId = byteVecSlice!(payload, index, index + 32)
        index = index + 32
        let tokenChainId = u256From2Byte!(byteVecSlice!(payload, index, index + 2))
        assert!(tokenChainId == remoteChainId)
        index = index + 2
        let decimals = u256From1Byte!(byteVecSlice!(payload, index, index + 1))
        index = index + 1
        let symbol = byteVecSlice!(payload, index, index + 32)
        index = index + 32
        let name = byteVecSlice!(payload, index, index + 32)
        index = index + 32
        assert!(size!(payload) == index)
        return tokenChainId, tokenContractId, decimals, symbol, name
    }

    pub payable fn createWrapper(vaa: ByteVec, payer: Address, createContractAlphAmount: U256) -> () {
        assert!(initialized)
        let (tokenChainId, tokenContractId, decimals, symbol, name) = parseAttestToken(vaa)
        assert!(tokenChainId != localChainId)

        let tokenWrapperFactory = TokenWrapperFactory(#{{ tokenWrapperFactoryAddress }})
        approveAlph!(payer, createContractAlphAmount)
        tokenWrapperFactory.createTokenWrapper(
            localTokenBridgeId,
            selfContractId!(),
            localChainId,
            tokenChainId,
            tokenContractId,
            decimals,
            symbol,
            name,
            payer,
            createContractAlphAmount
        )
    }

    // transfer native token to remote chain
    pub payable fn transferNative(
        nativeTokenId: ByteVec,
        fromAddress: Address,
        toAddress: ByteVec,
        amount: U256,
        arbiterFee: U256,
        nonce: ByteVec,
        consistencyLevel: U256
    ) -> () {
        assert!(initialized)
        assert!(size!(nativeTokenId) == 32)
        assert!(size!(toAddress) == 32)
        assert!(size!(nonce) == 4)

        let token = Token(nativeTokenId)
        let decimals = token.getDecimals()
        let math = Math(#{{ mathAddress }})
        let normalizedAmount = math.normalizeAmount(amount, decimals)
        let normalizedFee = math.normalizeAmount(arbiterFee, decimals)
        assert!(normalizedFee < normalizedAmount)

        // TODO: Do we need to consider potential transfer fees
        let transferAmount = math.deNormalizeAmount(normalizedAmount, decimals)
        transferTokenToSelf!(fromAddress, nativeTokenId, transferAmount)

        let payload = #01 ++ // payloadId
            u256To32Byte!(normalizedAmount) ++
            nativeTokenId ++
            u256To2Byte!(localChainId) ++
            toAddress ++
            u256To2Byte!(remoteChainId) ++
            u256To32Byte!(normalizedFee)
        let tokenBridge = TokenBridge(localTokenBridgeId)
        approveAlph!(fromAddress, tokenBridge.getMessageFee())
        tokenBridge.publishTransferNative(fromAddress, payload, nonce, consistencyLevel)
    }

    pub fn parseTransfer(vaa: ByteVec) -> (ByteVec, U256, ByteVec, U256, U256) {
        assert!(initialized)
        assert!(callerCodeHash!() == #{{ tokenWrapperCodeHash }})
        return parseTransfer_(vaa)
    }

    fn parseTransfer_(vaa: ByteVec) -> (ByteVec, U256, ByteVec, U256, U256) {
        let payload = verifyVAA(vaa)
        let mut index = 0
        assert!(byteVecSlice!(payload, index, index + 1) == #01) // payloadId
        index = index + 1
        let amount = u256From32Byte!(byteVecSlice!(payload, index, index + 32))
        index = index + 32
        let tokenId = byteVecSlice!(payload, index, index + 32)
        index = index + 32
        let tokenChainId = u256From2Byte!(byteVecSlice!(payload, index, index + 2))
        index = index + 2
        let recipientAddress = byteVecSlice!(payload, index, index + 32)
        index = index + 32
        let recipientChainId = u256From2Byte!(byteVecSlice!(payload, index, index + 2))
        assert!(recipientChainId == localChainId)
        index = index + 2
        let arbiterFee = u256From32Byte!(byteVecSlice!(payload, index, index + 32))
        index = index + 32
        assert!(size!(payload) == index)
        return tokenId, tokenChainId, recipientAddress, amount, arbiterFee
    }

    // transfer native token from remote chain
    pub payable fn completeNative(vaa: ByteVec, arbiter: Address) -> () {
        assert!(initialized)
        let (tokenId, tokenChainId, recipientAddress, amount, arbiterFee) = parseTransfer_(vaa)
        assert!(tokenChainId == localChainId)

        let token = Token(tokenId)
        let decimals = token.getDecimals()
        let math = Math(#{{ mathAddress }})
        let denomalizedAmount = math.deNormalizeAmount(amount, decimals)
        let denomalizedFee = math.deNormalizeAmount(arbiterFee, decimals)
        assert!(denomalizedAmount > denomalizedFee)

        let transferAmount = denomalizedAmount - denomalizedFee
        let recipient = byteVecToAddress!(#00 ++ recipientAddress)
        transferAlphFromSelf!(recipient, 1000000000000) // dustAmount
        transferTokenFromSelf!(recipient, tokenId, transferAmount)
        transferTokenFromSelf!(arbiter, tokenId, denomalizedFee)
    }

    pub payable fn deposit(from: Address, amount: U256) -> () {
        transferAlphToSelf!(from, amount)
    }
}
