import "token_bridge.ral"
import "token.ral"
import "token_wrapper_factory.ral"
import "math.ral"
import "sequence.ral"

TxContract TokenBridgeForChain(
    localChainId: U256,
    localTokenBridgeId: ByteVec, // local chain token bridge contract id
    remoteChainId: U256,
    remoteTokenBridgeId: ByteVec, // remote chain token bridge contract id
    mut next: U256,
    mut next1: U256,
    mut next2: U256
) extends Sequence(next, next1, next2), Math() {
    pub fn getLocalTokenBridgeId() -> (ByteVec) {
        return localTokenBridgeId
    }

    pub fn getLocalChainId() -> (U256) {
        return localChainId
    }

    // return payload
    fn verifyVAA(vaa: ByteVec) -> (ByteVec) {
        let tokenBridge = TokenBridge(localTokenBridgeId)
        let (emitterChainId, emitterAddress, msgSequence, payload) = tokenBridge.parseAndVerify(vaa)
        assert!(emitterChainId == remoteChainId)
        assert!(emitterAddress == remoteTokenBridgeId)
        checkSequence(msgSequence)
        return payload
    }

    // return (tokenContractId, tokenDecimals, tokenSymbol, tokenName)
    fn parseAttestToken(vaa: ByteVec) -> (ByteVec, U256, ByteVec, ByteVec) {
        let payload = verifyVAA(vaa)
        let mut index = 0
        assert!(byteVecSlice!(payload, index, index + 1) == #02) // payload id
        index = index + 1
        let tokenContractId = byteVecSlice!(payload, index, index + 32)
        index = index + 32
        let tokenChainId = u256From2Byte!(byteVecSlice!(payload, index, index + 2))
        assert!(tokenChainId == remoteChainId)
        index = index + 2
        let decimals = u256From1Byte!(byteVecSlice!(payload, index, index + 1))
        index = index + 1
        let symbol = byteVecSlice!(payload, index, index + 32)
        index = index + 32
        let name = byteVecSlice!(payload, index, index + 32)
        index = index + 32
        assert!(size!(payload) == index)
        return tokenContractId, decimals, symbol, name
    }

    pub payable fn createWrapperForLocalToken(tokenId: ByteVec, payer: Address, createContractAlphAmount: U256) -> () {
        let token = Token(tokenId)
        let tokenWrapperFactory = TokenWrapperFactory(#{{ tokenWrapperFactoryAddress }})
        approveAlph!(payer, createContractAlphAmount)
        tokenWrapperFactory.createWrapper(
            localTokenBridgeId,
            localChainId,
            remoteChainId,
            tokenId,
            true,
            token.getDecimals(),
            token.getSymbol(),
            token.getName(),
            payer,
            createContractAlphAmount
        )
    }

    pub payable fn createWrapperForRemoteToken(vaa: ByteVec, payer: Address, createContractAlphAmount: U256) -> () {
        let (tokenContractId, decimals, symbol, name) = parseAttestToken(vaa)
        let tokenWrapperFactory = TokenWrapperFactory(#{{ tokenWrapperFactoryAddress }})
        approveAlph!(payer, createContractAlphAmount)
        tokenWrapperFactory.createWrapper(
            localTokenBridgeId,
            localChainId,
            remoteChainId,
            tokenContractId,
            false,
            decimals,
            symbol,
            name,
            payer,
            createContractAlphAmount
        )
    }

    pub fn parseTransfer(vaa: ByteVec) -> (ByteVec, U256, ByteVec, U256, U256) {
        assert!(callerCodeHash!() == #{{ tokenWrapperCodeHash }})
        let payload = verifyVAA(vaa)
        let mut index = 0
        assert!(byteVecSlice!(payload, index, index + 1) == #01) // payloadId
        index = index + 1
        let amount = u256From32Byte!(byteVecSlice!(payload, index, index + 32))
        index = index + 32
        let tokenId = byteVecSlice!(payload, index, index + 32)
        index = index + 32
        let tokenChainId = u256From2Byte!(byteVecSlice!(payload, index, index + 2))
        index = index + 2
        let recipientAddress = byteVecSlice!(payload, index, index + 32)
        index = index + 32
        let recipientChainId = u256From2Byte!(byteVecSlice!(payload, index, index + 2))
        assert!(recipientChainId == localChainId)
        index = index + 2
        let arbiterFee = u256From32Byte!(byteVecSlice!(payload, index, index + 32))
        index = index + 32
        assert!(size!(payload) == index)
        return tokenId, tokenChainId, recipientAddress, amount, arbiterFee
    }
}
