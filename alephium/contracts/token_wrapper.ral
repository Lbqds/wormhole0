import "token_bridge.ral"
import "token_bridge_for_chain.ral"
import "math.ral"

TxContract TokenWrapper(
    tokenBridgeId: ByteVec,
    tokenBridgeForChainId: ByteVec,
    localChainId: U256,
    remoteChainId: U256,
    tokenContractId: ByteVec,
    isNativeToken: Bool,
    tokenDecimals: U256,
    symbol: ByteVec,
    name: ByteVec
) extends Math() {
    fn getTokenId() -> ByteVec {
        if (isNativeToken) {
            return tokenContractId
        }
        return selfContractId!()
    }

    fn getTokenChainId() -> U256 {
        if (isNativeToken) {
            return localChainId
        }
        return remoteChainId
    }

    pub payable fn transfer(
        fromAddress: Address,
        toAddress: ByteVec,
        amount: U256,
        arbiterFee: U256,
        nonce: ByteVec,
        consistencyLevel: U256
    ) -> () {
        assert!(size!(toAddress) == 32)
        assert!(size!(nonce) == 4)

        let normalizedAmount = normalizeAmount(amount, tokenDecimals)
        let normalizedFee = normalizeAmount(arbiterFee, tokenDecimals)
        assert!(normalizedFee < normalizedAmount)

        let transferAmount = deNormalizeAmount(normalizedAmount, tokenDecimals)
        transferTokenToSelf!(fromAddress, getTokenId(), transferAmount)

        let tokenChainId = getTokenChainId()
        let payload = #01 ++ // payloadId
            u256To32Byte!(normalizedAmount) ++
            tokenContractId ++
            u256To2Byte!(tokenChainId) ++
            toAddress ++
            u256To2Byte!(remoteChainId) ++
            u256To32Byte!(normalizedFee) ++
            byteVec!(isNativeToken)

        let tokenBridge = TokenBridge(tokenBridgeId)
        approveAlph!(fromAddress, tokenBridge.getMessageFee())
        tokenBridge.publishTransfer(fromAddress, payload, nonce, consistencyLevel)
    }

    pub payable fn completeTransfer(vaa: ByteVec, arbiter: Address) -> () {
        let tokenBridgeForChain = TokenBridgeForChain(tokenBridgeForChainId)
        let (msgTokenId, msgTokenChainId, recipientAddress, amount, arbiterFee) = tokenBridgeForChain.parseTransfer(vaa)
        assert!(msgTokenId == tokenContractId)
        assert!(msgTokenChainId == getTokenChainId())

        let denomalizedAmount = deNormalizeAmount(amount, tokenDecimals)
        let denomalizedFee = deNormalizeAmount(arbiterFee, tokenDecimals)
        assert!(denomalizedAmount > denomalizedFee)

        let transferAmount = denomalizedAmount - denomalizedFee
        let recipient = byteVecToAddress!(#00 ++ recipientAddress)
        let tokenId = getTokenId()
        transferAlphFromSelf!(recipient, 1000000000000) // dustAmount
        transferTokenFromSelf!(recipient, tokenId, transferAmount)
        transferTokenFromSelf!(arbiter, tokenId, denomalizedFee)
    }

    pub payable fn deposit(from: Address, amount: U256) -> () {
        transferAlphToSelf!(from, amount)
    }
}
