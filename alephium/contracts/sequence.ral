// sequence started from 0, set `next = 0` when init contract state
TxContract Sequence(
    mut next: U256,
    mut next1: U256, // TODO: better name
    mut next2: U256 
) {
    pub fn getNext() -> U256 {
        return next 
    }

    pub fn getNext1() -> U256 {
        return next1
    }

    pub fn getNext2() -> U256 {
        return next2
    }

    fn compact() -> (Bool) {
        if (next1 == 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) {
            next = next + 256
            next1 = next2
            next2 = 0
            return true
        }
        return false
    }

    fn setExecuted(pos: U256, offset: U256, current: U256) -> U256 {
        let shift = pos * 8
        let value = (current >> shift) & 0xff
        let flag = 1 << offset
        assert!(value & flag == 0)
        let executed = value | flag
        return current | (executed << shift)
    }

    fn checkSequence(seq: U256) -> () {
        assert!(seq >= next)
        if (seq >= (next + 512)) {
            if (compact()) {
                checkSequence(seq)
                return
            }
        }

        assert!(next <= seq && seq < (next + 512))
        let seqIndex = seq - next
        let pos = seqIndex / 8
        let offset = seqIndex % 8
        if (pos < 32) {
            next1 = setExecuted(pos, offset, next1)
        } else {
            next2 = setExecuted(pos - 32, offset, next2)
        }
    }
}