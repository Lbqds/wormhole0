// sequence started from 0, set `next = 0` when init contract state
TxContract Sequence(
    mut next: U256,
    mut next1: [Bool; 20], // TODO: better name
    mut next2: [Bool; 20]
) {
    pub fn getNext() -> (U256) {
        return next 
    }

    pub fn getNext1() -> ([Bool; 20]) {
        return next1
    }

    pub fn getNext2() -> ([Bool; 20]) {
        return next2
    }

    fn compact() -> (Bool) {
        let mut allExecuted = true
        loop(0, 20, 1, allExecuted = allExecuted && next1[?])
        if (allExecuted) {
            next = next + 20
            next1 = next2
            loop(0, 20, 1, next2[?] = false)
        }
        return allExecuted
    }

    fn checkSequence(seq: U256) -> () {
        assert!(seq >= next)
        if (seq >= (next + 40)) {
            if (compact()) {
                checkSequence(seq)
                return
            }
        }

        assert!(next <= seq && seq < (next + 40))
        let mut index = seq - next 
        if (index < 20) {
            loop(0, 20, 1,
                if (? == index) {
                    assert!(!next1[?])
                    next1[?] = true
                }
            )
            return
        }
        
        index = index - 20
        loop(0, 20, 1,
            if (? == index) {
                assert!(!next2[?])
                next2[?] = true
            }
        )
    }
}